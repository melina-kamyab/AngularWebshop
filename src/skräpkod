handleCartItems(){

    // //create a holder for when looping through cartItems
    // let updatedCartObject = {};

    // //check for similar objects and add the prices of the similar objects together
    // this.cartItems.forEach(function(movie){
    //   if (updatedCartObject.hasOwnProperty(movie.name)){
    //     updatedCartObject[movie.name] = updatedCartObject[movie.name] + movie.price;
    //   }else {
    //     updatedCartObject[movie.name] = movie.price
    //   }
    // })

    // //create a new cart-array and place the objects inside it 
    // let updatedCart = [];
    // for(let prop in updatedCartObject){
    //   updatedCart.push({name:prop, price:updatedCartObject[prop]});
    // }
    // console.log(updatedCart);
    // return updatedCart;
}


  <p>Payment type</p>
   <label for="mastercard"> Mastercard</label>
   <input type="checkbox" name="mastercard" >

   <label for="visa"> Visa</label>
   <input type="checkbox" name="visa" >



 // orderDetails = new FormGroup({
  //   firstname: new FormControl(''),
  //   lastname: new FormControl(''),
  // });
------------------------------------------------------
  // we use the formbuilder method to connects the 
  // values from our html 
  orderDetails = this.fb.group({
    firstname:[''],
    lastname:[''],
    totalPrice:[this.handleCartItems()],
    nicknames: this.fb.array([this.fb.control('')])
  })
 
    <div formArrayName="nicknames">
        <h4>Nicknames</h4>
        <div *ngFor="let n of nicks.controls; let i=index">
            <label> Nickname</label>
            <input type="text" [formControlName]="i">
            <button (click)="addNickname()">Add</button>
        </div>
    </div>


  //create a help function and force the value inside an array through 
  //casting
  get nicks(){
    return this.orderDetails.get("nicknames") as FormArray;
    //this.nicks
  }

  addNickname():void {
    this.nicks.push(this.fb.control(''));
  }
  ------------------------------------------

  //function for calculating the total som of all cart items and return the value 
  handleCartItems(): number{
    let totalSumInCart = this.cartItems.reduce((accumulator, currentValue)=>{ return accumulator + currentValue.price 
    }, 0)
    this.totalSum = totalSumInCart;
    return totalSumInCart;
  }
----------------------------------------
  //function for handling similar cart items and adding them together
  handleSimilarCartItems(){
    //create a holder for when looping through cartItems
    let updatedCartObject = {};
  
    //check for similar objects and add the prices of the similar objects together
    this.cartItems.forEach(function(movie){
      if (updatedCartObject.hasOwnProperty(movie.name)){
        updatedCartObject[movie.name] = updatedCartObject[movie.name] + movie.price;
      }else {
        updatedCartObject[movie.name] = movie.price
      }
    })
  
    //create a new cart-array and place the objects inside it 
    let updatedCart = [];

    for(let prop in updatedCartObject){
      updatedCart.push({name:prop, price:updatedCartObject[prop]});
    }

    console.log(updatedCart);
    return updatedCart;
  }



  ------
  TODO: 

  - skriv README 
  - ordna så att jag använder mig av variabler 
  - summera antalet och rendera endast ut en av varje dublett i shoppingcarten 
  - skriv najsare innehåll 
  - strukturera scss
